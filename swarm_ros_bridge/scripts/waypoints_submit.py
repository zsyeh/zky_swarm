#!/usr/bin/env python
import rospy
import json
import requests
from geometry_msgs.msg import PoseStamped

INIT_URL = 'http://194.194.194.101:8000/initWaypoint/'


def init_waypoint():
        try:
            resp = requests.get(INIT_URL, timeout=5)
            if resp.status_code == 200:
                body = resp.json()
                rospy.loginfo(
                    "初始化 targets 成功: status=%s, message=%s, count=%d",
                    body.get('status'),
                    body.get('message'),
                    body.get('count', 0)
                )
            else:
                rospy.logwarn(
                    "初始化 targets 返回非 200: %d %s",
                    resp.status_code,
                    resp.text
                )
        except requests.RequestException as e:
            rospy.logerr(f"初始化 targets 请求失败: {e}")
            
class DroneController:
    def __init__(self):
        # 新版无人机配置模板（直接包含航点数组）
        self.mission_config = {
            1: {  # 当x=1时的配置
                1: [[0,0,1.3], [6.4,0,1.3], [6.4,-7.5,1.3], [8.52,-31.67,3], [8.52,-31.67,1], [17.26,-31.67,1], [17.67,-34.84,1], [33.87,-68.19,3]],  # 四边形路径
                2: [[0, 0, 1.3], [4.4, 0, 1.3], [4.4, -7.5, 1.3], [6.52, -31.67, 3], [6.52, -31.67, 1], [15.26, -31.67, 1], [15.67, -34.84, 1], [22.64, -68.0, 3]],
                3: [[0,0,1.3], [2.4, 0, 1.3], [2.4, -7.5, 1.3], [4.52, -31.67, 3], [4.52, -31.67, 1], [13.26, -31.67, 1], [13.67, -34.84, 1], [30.07, -59.0, 3]], 
                4: [[0,0,1.3], [0.4, 0, 1.3], [0.4, -7.5, 1.3], [2.52, -31.67, 3], [2.52, -31.67, 1], [11.26, -31.67, 1], [11.67, -34.84, 1], [18.07, -58.0, 3]], 
                5: [[0,0,1.3], [-2.4, 0, 1.3], [-2.4, -7.5, 1.3], [3.52, -31.67, 3], [3.52, -31.67, 1], [9.26, -31.67, 1], [9.67, -34.84, 1], [25.43, -46.64, 3]], 
                6: [[0,0,1.3], [-4.4, 0, 1.3], [-4.4, -7.5, 1.3], [1.52, -31.67, 3], [1.52, -31.67, 1], [7.26, -31.67, 1], [7.67, -34.84, 1], [13.68, -46.1, 3]], 
                7: [[0,0,1.3], [-4.4, -2, 1.3], [-4.4, -9.5, 1.3], [3.15, -19.7, 1], [7.15, -19.7, 1]], 
                8: [[0,0,1.3], [-2.4, -2, 1.3], [-2.4, -9.5, 1.3], [3.52, -33.67, 3], [3.52, -33.67, 1], [12.38, -33.29, 1], [12.38, -29.29, 1]], 
                9: [[0,0,1.3], [0.4, -2, 1.3], [0.4, -9.5, 1.3], [4.5, -34.39, 4.1], [11.7, -34.77, 4.1]], 
                10: [[0,0,1.3], [2.4, -2, 1.3], [2.4, -9.5, 1.3], [6.5, -14.1, 4.1], [13.5, -14.1, 4.1]], 
                11: [[0,0,1.3], [4.4, -2, 1.3], [4.4, -9.5, 1.3], [3.55, -27.4, 4.1]], 
                12: [[0,0,1.3], [6.4, 0, 1.3], [6.4, -9.5, 1.3], [1.94, -19, 2.5]], 
                13: [[0, 0, 2], [-7, 0, 2]], 
                14: [[0, 0, 10], [-3.75, -83, 10]], 
                15: [[0, 0, 15], [-7, -62.48, 15]], 
                16: [[0, 0, 20], [-16.9, -39.6, 20]], 
                17: [[0, 0, 25], [-18.4, -22.3, 25]], 
                18: [[0, 0, 25], [36.66, -18.3, 25]], 
                19: [[0, 0, 20], [38.6, -39.8, 20]], 
                20: [[0, 0, 15], [37.6, -64.8, 15]], 
                21: [[0, 0, 10], [35, -90, 10]], 
                22: [[0, 0, 2], [16, 0, 2]]
            },
            2: {  # 当x=2时的配置
                1: [[0,0,1.3], [6.4,0,1.3], [6.4,-7.5,1.3], [8.52,-31.67,3], [8.52,-31.67,1], [17.26,-31.67,1], [17.67,-34.84,1], [33.87,-68.19,3]],
                2: [[0, 0, 1.3], [4.4, 0, 1.3], [4.4, -7.5, 1.3], [6.52, -31.67, 3], [6.52, -31.67, 1], [15.26, -31.67, 1], [15.67, -34.84, 1], [22.64, -68.0, 3]],
                3: [[0,0,0]], 
                4: [[0,0,0]], 
                5: [[0,0,0]], 
                6: [[0,0,0]], 
                7: [[0,0,1.3], [-4.4, -2, 1.3], [-4.4, -9.5, 1.3], [3.15, -19.7, 1], [7.15, -19.7, 1]], 
                8: [[0,0,1.3], [-2.4, -2, 1.3], [-2.4, -9.5, 1.3], [3.52, -33.67, 3], [3.52, -33.67, 1], [12.38, -33.29, 1], [12.38, -29.29, 1]], 
                9: [[0,0,1.3], [0.4, -2, 1.3], [0.4, -9.5, 1.3], [4.5, -34.39, 4.1], [11.7, -34.77, 4.1]], 
                10: [[0,0,1.3], [2.4, -2, 1.3], [2.4, -9.5, 1.3], [6.5, -14.1, 4.1], [13.5, -14.1, 4.1]], 
                11: [[0,0,0]], 
                12: [[0,0,0]], 
                13: [[0, 0, 2], [-7, 0, 2]], 
                14: [[0, 0, 10], [-3.75, -83, 10]], 
                15: [[0, 0, 15], [-7, -62.48, 15]], 
                16: [[0, 0, 20], [-16.9, -39.6, 20]], 
                17: [[0, 0, 25], [-18.4, -22.3, 25]], 
                18: [[0, 0, 25], [36.66, -18.3, 25]], 
                19: [[0, 0, 20], [38.6, -39.8, 20]], 
                20: [[0, 0, 15], [37.6, -64.8, 15]], 
                21: [[0, 0, 10], [35, -90, 10]], 
                22: [[0, 0, 2], [16, 0, 2]]
            },
            3: {  # 当x=3时的配置
                1: [[0,0,1.3], [6.4,0,1.3], [6.4,-7.5,1.3], [8.52,-31.67,3], [8.52,-31.67,1], [17.26,-31.67,1], [17.67,-34.84,1], [33.87,-68.19,3]],  # 四边形路径
                2: [[0, 0, 1.3], [4.4, 0, 1.3], [4.4, -7.5, 1.3], [6.52, -31.67, 3], [6.52, -31.67, 1], [15.26, -31.67, 1], [15.67, -34.84, 1], [22.64, -68.0, 3]],
                3: [[0,0,1.3], [2.4, 0, 1.3], [2.4, -7.5, 1.3], [4.52, -31.67, 3], [4.52, -31.67, 1], [13.26, -31.67, 1], [13.67, -34.84, 1], [30.07, -59.0, 3]], 
                4: [[0,0,1.3], [0.4, 0, 1.3], [0.4, -7.5, 1.3], [2.52, -31.67, 3], [2.52, -31.67, 1], [11.26, -31.67, 1], [11.67, -34.84, 1], [18.07, -58.0, 3]], 
                5: [[0,0,0]], 
                6: [[0,0,0]], 
                7: [[0,0,1.3], [-4.4, -2, 1.3], [-4.4, -9.5, 1.3], [3.15, -19.7, 1], [7.15, -19.7, 1]], 
                8: [[0,0,0]], 
                9: [[0,0,0]], 
                10: [[0,0,1.3], [2.4, -2, 1.3], [2.4, -9.5, 1.3], [6.5, -14.1, 4.1], [13.5, -14.1, 4.1]], 
                11: [[0,0,0]], 
                12: [[0,0,0]], 
                13: [[0, 0, 2], [-7, 0, 2]], 
                14: [[0, 0, 10], [-3.75, -83, 10]], 
                15: [[0,0,0]], 
                16: [[0,0,0]], 
                17: [[0,0,0]], 
                18: [[0,0,0]], 
                19: [[0,0,0]], 
                20: [[0,0,0]], 
                21: [[0, 0, 10], [35, -90, 10]], 
                22: [[0, 0, 2], [16, 0, 2]]
            },
        }
        
        # API配置（带重试机制）
        self.api_config = {
            "base_url": "http://194.194.194.101:8000",
            "endpoint": "/addSimWaypoints/",
            "timeout": 5,
            "retries": 3,
            "headers": {"Content-Type": "application/json"}
        }

    

    def generate_payload(self, condition):
        """根据条件生成请求载荷（适配新版配置结构）"""
        if condition not in self.mission_config:
            rospy.logwarn(f"无效的条件编号: {condition}")
            return None
        
        drones = []
        init_waypoint()


        
        for drone_id, waypoints in self.mission_config[condition].items():

            if not waypoints or waypoints[0] == [0, 0, 0]:
                rospy.loginfo(f"跳过无人机{drone_id}，其首航点为全0")
                continue
            payload = {"uav_id": f"{drone_id}",  # 自动生成无人机ID
                "waypoints": [
                    {"x": float(x), "y": float(y), "z": float(z)}
                    for x, y, z in waypoints
                ]
            }
            
            self.send_mission(payload)
        
        return {
            "drones": drones,
        }

    def send_mission(self, payload):
        """增强版任务发送（带重试机制）"""
        url = f"{self.api_config['base_url']}{self.api_config['endpoint']}"
        
        for attempt in range(self.api_config['retries']):
            try:
                response = requests.post(
                    url,
                    json=payload,  # 使用json参数自动序列化
                    headers=self.api_config['headers'],
                    timeout=self.api_config['timeout']
                )
                
                if response.status_code == 200:
                    rospy.loginfo(f"任务发送成功 (尝试{attempt+1}/{self.api_config['retries']})！响应: {response.text}")
                    return True
                else:
                    rospy.logwarn(f"API异常响应 [{response.status_code}]: {response.text}")
                    
            except requests.exceptions.RequestException as e:
                rospy.logwarn(f"请求失败 (尝试{attempt+1}/{self.api_config['retries']}): {str(e)}")
                if attempt == self.api_config['retries'] - 1:
                    rospy.logerr("所有重试均失败！")
                    return False

def pose_callback(msg, controller):
    # 提取并验证x值（支持新条件4）
    x = round(msg.pose.position.x)
    
    if x not in controller.mission_config.keys():
        rospy.logdebug(f"忽略无效x值: {x} (有效值: {list(controller.mission_config.keys())})")
        return
    
    # 生成任务载荷
    controller.generate_payload(x)


def main():
    rospy.init_node('drone_mission_controller')
    
    controller = DroneController()
    
    # 订阅ROS话题（增加队列大小）
    rospy.Subscriber(
        "/type", 
        PoseStamped, 
        pose_callback,
        callback_args=controller,
        queue_size=10  # 防止消息堆积
    )
    
    rospy.loginfo(f"无人机任务控制器已启动，等待指令...\n可用条件: {list(controller.mission_config.keys())}")
    rospy.spin()

if __name__ == '__main__':
    try:
        main()
    except rospy.ROSInterruptException:
        pass

##########################################
# 修改后的代码
